generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(AGENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  invoices      Invoice[]
  purchaseOrders PurchaseOrder[]
  validationReports ValidationReport[]
}

model Customer {
  id            String    @id @default(cuid())
  title         String
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  passportNo    String?
  nationalId    String?
  dateOfBirth   DateTime
  nationality   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      BookingPassenger[]
  tourPassengers TourPassenger[]
  purchaseOrders PurchaseOrder[]
}

model Flight {
  id            String    @id @default(cuid())
  flightNumber  String    @unique
  airline       String
  origin        String
  destination   String
  departureTime DateTime
  arrivalTime   DateTime
  price         Float
  availableSeats Int
  totalSeats    Int
  status        FlightStatus @default(SCHEDULED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
}

model Department {
  id            String    @id @default(cuid())
  code          String    @unique
  nameEn        String
  nameTh        String
  taxId         String?
  ministry      String?
  address       String?
  phone         String?
  email         String?
  contactPerson String?
  budget        Float?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  purchaseOrders PurchaseOrder[]
  creditCards   CreditCard[]
  
  @@index([code])
  @@index([isActive])
}

model PurchaseOrder {
  id            String    @id @default(cuid())
  poNumber      String    @unique
  type          POType
  status        POStatus  @default(PENDING)
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id])
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id])
  totalAmount   Float
  cost          Float
  serviceFee    Float
  profit        Float
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  bookings      Booking[]
  tourBookings  TourBooking[]
  invoices      Invoice[]
  creditCardTransactions CreditCardTransaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([poNumber])
  @@index([userId])
  @@index([departmentId])
  @@index([customerId])
}

model Booking {
  id            String    @id @default(cuid())
  bookingRef    String    @unique
  purchaseOrderId String?
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  type          BookingType
  status        BookingStatus @default(PENDING)

  // Flight Information
  flightNumber  String
  airline       String
  origin        String
  destination   String
  departureDate DateTime
  arrivalDate   DateTime

  // Cost Information (for the entire booking)
  basePrice     Float     // Base price per passenger
  totalCost     Float     // Total cost for all passengers
  totalServiceFee Float   // Total service fee for all passengers
  totalAmount   Float     // Final amount (basePrice * passengers + fees)

  // Validation Information
  airlinePNR    String?   // Airline's PNR/Confirmation number
  ticketNumber  String?   // Ticket number from airline
  isValidated   Boolean   @default(false)
  validatedAt   DateTime?
  validatedBy   String?

  userId        String
  user          User      @relation(fields: [userId], references: [id])
  flightId      String?   // Optional - reference to flight if exists
  flight        Flight?   @relation(fields: [flightId], references: [id])
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id])
  passengers    BookingPassenger[]
  invoice       Invoice?
  rescheduleHistory RescheduleHistory[]
  validationResults ValidationResult[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([bookingRef])
  @@index([userId])
  @@index([flightId])
  @@index([departmentId])
  @@index([purchaseOrderId])
  @@index([airlinePNR])
  @@index([ticketNumber])
  @@index([isValidated])
}

model BookingPassenger {
  id          String    @id @default(cuid())
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  seatNumber  String?
  // Per-passenger calculated amounts
  individualPrice Float  // Price for this passenger
  individualCost Float   // Cost allocated to this passenger
  individualServiceFee Float // Service fee allocated to this passenger
  
  @@unique([bookingId, customerId])
}

model TourPackage {
  id            String    @id @default(cuid())
  tourId        String    @unique
  name          String
  description   String?
  destination   String
  duration      Int       // Duration in days
  price         Float
  maxCapacity   Int
  includes      String[]  // Array of included services
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tourBookings  TourBooking[]

  @@index([tourId])
  @@index([isActive])
}

model TourBooking {
  id              String    @id @default(cuid())
  bookingRef      String    @unique
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  tourPackageId   String
  tourPackage     TourPackage @relation(fields: [tourPackageId], references: [id])
  passengers      TourPassenger[]
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  
  // Tour Program Details
  tourProgramDetails String? @db.Text
  departureDate   DateTime?
  returnDate      DateTime?
  pickupLocation  String?
  pickupTime      String?
  specialRequirements String? @db.Text
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([purchaseOrderId])
  @@index([tourPackageId])
}

model TourPassenger {
  id            String    @id @default(cuid())
  tourBookingId String
  tourBooking   TourBooking @relation(fields: [tourBookingId], references: [id], onDelete: Cascade)
  customerId    String
  customer      Customer  @relation(fields: [customerId], references: [id])
  specialRequests String?

  @@unique([tourBookingId, customerId])
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceNumber String    @unique
  bookingId     String?   @unique
  booking       Booking?  @relation(fields: [bookingId], references: [id])
  purchaseOrderId String?
  purchaseOrder PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  amount        Float
  tax           Float
  totalAmount   Float
  status        InvoiceStatus @default(PENDING)
  qrCode        String?   @db.Text
  pdfUrl        String?
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([invoiceNumber])
  @@index([purchaseOrderId])
}

model RescheduleHistory {
  id            String    @id @default(cuid())
  bookingId     String
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  oldFlightId   String
  newFlightId   String
  oldDeparture  DateTime
  newDeparture  DateTime
  priceDiff     Float
  reason        String?
  createdAt     DateTime  @default(now())
  
  @@index([bookingId])
}

model Report {
  id            String    @id @default(cuid())
  type          ReportType
  period        ReportPeriod
  startDate     DateTime
  endDate       DateTime
  data          Json
  generatedBy   String
  createdAt     DateTime  @default(now())
  
  @@index([type, period])
  @@index([startDate, endDate])
}

model CreditCard {
  id                String    @id @default(cuid())
  cardNumber        String    @unique
  cardName          String
  cardType          CardType
  cardHolder        String
  expiryMonth       Int
  expiryYear        Int
  creditLimit       Float
  availableCredit   Float
  isActive          Boolean   @default(true)
  departmentId      String?
  department        Department? @relation(fields: [departmentId], references: [id])
  transactions      CreditCardTransaction[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([cardNumber])
  @@index([departmentId])
  @@index([isActive])
}

model CreditCardTransaction {
  id              String    @id @default(cuid())
  cardId          String
  card            CreditCard @relation(fields: [cardId], references: [id])
  purchaseOrderId String?
  purchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  transactionType TransactionType
  amount          Float
  description     String
  referenceNumber String?
  balanceBefore   Float
  balanceAfter    Float
  createdAt       DateTime  @default(now())
  createdBy       String?
  
  @@index([cardId])
  @@index([purchaseOrderId])
  @@index([transactionType])
  @@index([createdAt])
}

enum Role {
  ADMIN
  AGENT
  VIEWER
}

enum POType {
  FLIGHT
  TOUR
}

enum POStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum BookingType {
  INDIVIDUAL
  GROUP
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
}

enum FlightStatus {
  SCHEDULED
  DELAYED
  CANCELLED
  COMPLETED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum ReportType {
  BOOKING
  REVENUE
  OCCUPANCY
  AGENT_PERFORMANCE
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
}

enum CardType {
  VISA
  MASTERCARD
  AMEX
  JCB
  UNIONPAY
  OTHER
}

enum TransactionType {
  CHARGE
  PAYMENT
  REFUND
  ADJUSTMENT
}

model ValidationReport {
  id            String    @id @default(cuid())
  reportNumber  String    @unique
  fileName      String
  fileUrl       String?
  fileType      String    // CSV or EXCEL
  totalRecords  Int
  matchedRecords Int
  unmatchedRecords Int
  partialMatches Int
  status        ValidationStatus @default(PROCESSING)
  uploadedBy    String
  user          User      @relation(fields: [uploadedBy], references: [id])
  results       ValidationResult[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([reportNumber])
  @@index([status])
  @@index([uploadedBy])
}

model ValidationResult {
  id            String    @id @default(cuid())
  reportId      String
  report        ValidationReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  bookingId     String?
  booking       Booking?  @relation(fields: [bookingId], references: [id])

  // Data from airline file
  airlineRef    String    // PNR or booking reference from airline
  ticketNumber  String?
  passengerName String
  flightNumber  String
  flightDate    DateTime
  amount        Float?

  // Matching results
  matchStatus   MatchStatus
  matchScore    Float?    // Confidence score 0-100
  matchDetails  Json?     // Details of what matched/didn't match
  isApproved    Boolean   @default(false)
  approvedBy    String?
  approvedAt    DateTime?
  notes         String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([reportId])
  @@index([bookingId])
  @@index([matchStatus])
}

enum ValidationStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum MatchStatus {
  MATCHED       // Full match found
  PARTIAL       // Partial match (needs review)
  UNMATCHED     // No match found
  DUPLICATE     // Multiple matches found
  APPROVED      // Manually approved
  REJECTED      // Manually rejected
}